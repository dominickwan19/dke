//-------------------------------------------------------------------------------------------------
#include <graphics/Buffer.h>
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
namespace dke {
namespace graphics {
//-------------------------------------------------------------------------------------------------

Buffer::Buffer(uint32_t target, size_t bufferSize)
    : m_bufferSize(bufferSize)
    , m_target(target)
{
    m_data.reserve(bufferSize);
}

//-------------------------------------------------------------------------------------------------

Buffer::~Buffer()
{
    m_data.clear();
}

//-------------------------------------------------------------------------------------------------

int32_t Buffer::addData(void* data, size_t dataSizeInByte)
{
    int32_t index = (int32_t)m_data.size();
    m_data.insert(m_data.end(), (char*)data, (char*)data + dataSizeInByte);
    return index;
}

//-------------------------------------------------------------------------------------------------

void* Buffer::getDataPointer()
{
    return m_data.data();
}

//-------------------------------------------------------------------------------------------------

size_t Buffer::getDataSizeInBytes() const
{
    return m_data.size();
}

//-------------------------------------------------------------------------------------------------

void Buffer::bind(int32_t bindLocation, int32_t componentSize)
{
    printf("Buffer(%p)-%d::bind, ", this, m_id);
    //printf("device id: %d\n", m_deviceId);

    printf("-- bind location = %d, device id = %d, componentSize = %d\n", bindLocation, m_deviceId, componentSize);
    fflush(stdout);
}

//-------------------------------------------------------------------------------------------------

void Buffer::unbind()
{
}

//-------------------------------------------------------------------------------------------------

void Buffer::createOnDevice()
{
}

//-------------------------------------------------------------------------------------------------

void Buffer::destroyOnDevice()
{
}

//-------------------------------------------------------------------------------------------------

void Buffer::cacheToDevice()
{
    printf("Buffer(%p)-%d::cacheToDevice, ", this, m_id);
    printf("data size: %zd\n", m_data.size());

    static int deviceId = 100;
    deviceId++;
    m_deviceId = deviceId;
}

//-------------------------------------------------------------------------------------------------

void Buffer::cacheToDevice(char* data, int32_t start, int32_t size)
{
}

//-------------------------------------------------------------------------------------------------

void Buffer::readFromDevice()
{
}

//-------------------------------------------------------------------------------------------------

void Buffer::clearHostData()
{
    m_data.clear();
    m_data.shrink_to_fit();
}

//-------------------------------------------------------------------------------------------------

int32_t Buffer::id() const
{
    return m_id;
}

//-------------------------------------------------------------------------------------------------

void Buffer::setId(int32_t id)
{
    m_id = id;
}

//-------------------------------------------------------------------------------------------------

size_t Buffer::freeSize() const
{
    return m_bufferSize - m_data.size();
}

//-------------------------------------------------------------------------------------------------
} // namespace graphics
} // namespace dde
//-------------------------------------------------------------------------------------------------
